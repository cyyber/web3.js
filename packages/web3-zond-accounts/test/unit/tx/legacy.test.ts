/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
import { RLP } from '@ethereumjs/rlp';
import { bytesToHex, hexToBytes, uint8ArrayEquals } from '@theqrl/web3-utils';
import {
	Chain,
	Common,
	Hardfork,
	intToUint8Array,
	toUint8Array,
	//uint8ArrayToBigInt,
	unpadUint8Array,
} from '../../../src/common';

import { Transaction } from '../../../src';
import type { TxData } from '../../../src';
import txFixturesEip155 from '../../fixtures/json/ttTransactionTestEip155VitaliksTests.json';
import txFixtures from '../../fixtures/json/txs.json';

describe('[Transaction]', () => {
	const transactions: Transaction[] = [];

	it('cannot input decimal or negative values', () => {
		const values = ['gasPrice', 'gasLimit', 'nonce', 'value', 'v', 'r', 's'];
		const cases = [
			10.1,
			'10.1',
			'0xaa.1',
			-10.1,
			-1,
			BigInt(-10),
			'-100',
			'-10.1',
			'-0xaa',
			Infinity,
			-Infinity,
			NaN,
			{},
			true,
			false,
			// eslint-disable-next-line @typescript-eslint/no-empty-function
			() => {},
			Number.MAX_SAFE_INTEGER + 1,
		];
		for (const value of values) {
			const txData: any = {};
			for (const testCase of cases) {
				txData[value] = testCase;
				expect(() => {
					Transaction.fromTxData(txData);
				}).toThrow();
			}
		}
	});

	it('Initialization', () => {
		const nonEIP2930Common = new Common({ chain: Chain.Mainnet, hardfork: Hardfork.Istanbul });
		expect(Transaction.fromTxData({}, { common: nonEIP2930Common })).toBeTruthy();

		const txData = txFixtures[3].raw.map(toUint8Array);
		txData[6] = intToUint8Array(45); // v with 0-parity and chain ID 5
		let tx = Transaction.fromValuesArray(txData);
		expect(tx.common.chainId() === BigInt(5)).toBe(true);

		txData[6] = intToUint8Array(46); // v with 1-parity and chain ID 5
		tx = Transaction.fromValuesArray(txData);
		expect(tx.common.chainId() === BigInt(5)).toBe(true);

		txData[6] = intToUint8Array(2033); // v with 0-parity and chain ID 999
		tx = Transaction.fromValuesArray(txData);
		expect(tx.common.chainId()).toEqual(BigInt(999));

		txData[6] = intToUint8Array(2034); // v with 1-parity and chain ID 999
		tx = Transaction.fromValuesArray(txData);
		expect(tx.common.chainId()).toEqual(BigInt(999));
	});

	it('Initialization -> decode with fromValuesArray()', () => {
		for (const tx of txFixtures.slice(0, 4)) {
			const txData = tx.raw.map(toUint8Array);
			const pt = Transaction.fromValuesArray(txData);

			expect(bytesToHex(unpadUint8Array(toUint8Array(pt.nonce)))).toEqual(tx.raw[0]);
			expect(bytesToHex(toUint8Array(pt.gasPrice))).toEqual(tx.raw[1]);
			expect(bytesToHex(toUint8Array(pt.gasLimit))).toEqual(tx.raw[2]);
			expect(pt.to?.toString()).toEqual(tx.raw[3]);
			expect(bytesToHex(unpadUint8Array(toUint8Array(pt.value)))).toEqual(tx.raw[4]);
			expect(bytesToHex(pt.data)).toEqual(tx.raw[5]);
			expect(bytesToHex(toUint8Array(pt.publicKey))).toEqual(tx.raw[6]);
			expect(bytesToHex(toUint8Array(pt.signature))).toEqual(tx.raw[7]);

			transactions.push(pt);
		}
	});

	// it('Initialization -> should accept lesser r values', () => {
	// 	const tx = Transaction.fromTxData({ r: uint8ArrayToBigInt(toUint8Array('0x0005')) });
	// 	expect(tx.r!.toString(16)).toBe('5');
	// });

	// it('Initialization -> throws when creating a a transaction with incompatible chainid and v value', () => {
	// 	let common = new Common({ chain: Chain.Goerli, hardfork: Hardfork.Petersburg });
	// 	let tx = Transaction.fromTxData({}, { common });
	// 	expect(tx.common.chainId()).toEqual(BigInt(5));
	// 	const privKey = hexToBytes(txFixtures[0].privateKey);
	// 	tx = tx.sign(privKey);
	// 	const serialized = tx.serialize();
	// 	common = new Common({ chain: Chain.Mainnet, hardfork: Hardfork.Petersburg });
	// 	expect(() => Transaction.fromSerializedTx(serialized, { common })).toThrow();
	// });

	// it('Initialization -> throws if v is set to an EIP155-encoded value incompatible with the chain id', () => {
	// 	expect(() => {
	// 		const common = new Common({ chain: 42, hardfork: Hardfork.Petersburg });
	// 		Transaction.fromTxData({ v: BigInt(1) }, { common });
	// 	}).toThrow();
	// });

	it('validate() -> should validate with string option', () => {
		for (const tx of transactions) {
			expect(typeof tx.validate(true)[0]).toBe('string');
		}
	});

	it('getBaseFee() -> should return base fee', () => {
		const tx = Transaction.fromTxData({});
		expect(tx.getBaseFee()).toEqual(BigInt(53000));
	});

	it('getDataFee() -> should return data fee', () => {
		let tx = Transaction.fromTxData({});
		expect(tx.getDataFee()).toEqual(BigInt(0));

		tx = Transaction.fromValuesArray(txFixtures[3].raw.map(toUint8Array));
		expect(tx.getDataFee()).toEqual(BigInt(1716));

		tx = Transaction.fromValuesArray(txFixtures[3].raw.map(toUint8Array), { freeze: false });
		expect(tx.getDataFee()).toEqual(BigInt(1716));
	});

	it('getDataFee() -> should return correct data fee for istanbul', () => {
		const common = new Common({ chain: Chain.Mainnet, hardfork: Hardfork.Istanbul });
		let tx = Transaction.fromTxData({}, { common });
		expect(tx.getDataFee()).toEqual(BigInt(0));

		tx = Transaction.fromValuesArray(txFixtures[3].raw.map(toUint8Array), {
			common,
		});
		expect(tx.getDataFee()).toEqual(BigInt(1716));
	});

	it('getDataFee() -> should invalidate cached value on hardfork change', () => {
		const common = new Common({ chain: Chain.Mainnet, hardfork: Hardfork.Byzantium });
		const tx = Transaction.fromValuesArray(txFixtures[0].raw.map(toUint8Array), {
			common,
		});
		expect(tx.getDataFee()).toEqual(BigInt(656));
		tx.common.setHardfork(Hardfork.Istanbul);
		expect(tx.getDataFee()).toEqual(BigInt(240));
	});

	it('getUpfrontCost() -> should return upfront cost', () => {
		const tx = Transaction.fromTxData({
			gasPrice: 1000,
			gasLimit: 10000000,
			value: 42,
		});
		expect(tx.getUpfrontCost()).toEqual(BigInt(10000000042));
	});

	it('serialize()', () => {
		for (const [i, tx] of transactions.entries()) {
			const s1 = tx.serialize();
			const s2 = RLP.encode(txFixtures[i].raw);
			expect(uint8ArrayEquals(s1, s2)).toBe(true);
		}
	});

	it('serialize() -> should round trip decode a tx', () => {
		const tx = Transaction.fromTxData({ value: 5000 });
		const s1 = tx.serialize();

		const s1Rlp = toUint8Array(bytesToHex(s1));
		const tx2 = Transaction.fromSerializedTx(s1Rlp);
		const s2 = tx2.serialize();

		expect(uint8ArrayEquals(s1, s2)).toBe(true);
	});

	it('hash() / getMessageToSign(true) / getMessageToSign(false)', () => {
		const common = new Common({
			chain: Chain.Mainnet,
			hardfork: Hardfork.TangerineWhistle,
		});

		let tx = Transaction.fromValuesArray(txFixtures[3].raw.slice(0, 6).map(toUint8Array), {
			common,
		});
		expect(() => {
			tx.hash();
		}).toThrow();
		tx = Transaction.fromValuesArray(txFixtures[3].raw.map(toUint8Array), {
			common,
		});
		expect(tx.hash()).toEqual(
			hexToBytes('0x375a8983c9fc56d7cfd118254a80a8d7403d590a6c9e105532b67aca1efb97aa'),
		);
		expect(tx.getMessageToSign()).toEqual(
			hexToBytes('0x61e1ec33764304dddb55348e7883d4437426f44ab3ef65e6da1e025734c03ff0'),
		);
		expect(tx.getMessageToSign(false)).toHaveLength(6);
		expect(tx.hash()).toEqual(
			hexToBytes('0x375a8983c9fc56d7cfd118254a80a8d7403d590a6c9e105532b67aca1efb97aa'),
		);
	});

	it('hash() -> with defined chainId', () => {
		const tx = Transaction.fromValuesArray(txFixtures[4].raw.map(toUint8Array));
		expect(bytesToHex(tx.hash())).toBe(
			'0x0f09dc98ea85b7872f4409131a790b91e7540953992886fc268b7ba5c96820e4',
		);
		expect(bytesToHex(tx.getMessageToSign())).toBe(
			'0xf97c73fdca079da7652dbc61a46cd5aeef804008e057be3e712c43eac389aaf0',
		);
	});

	it("getMessageToSign(), getSenderPublicKey() (implicit call) -> verify EIP155 signature based on Vitalik's tests", () => {
		for (const tx of txFixturesEip155) {
			const pt = Transaction.fromSerializedTx(toUint8Array(tx.rlp));
			expect(bytesToHex(pt.getMessageToSign())).toEqual(tx.hash);
			expect(bytesToHex(pt.serialize())).toEqual(tx.rlp);
			expect(pt.getSenderAddress().toString()).toBe(`0x${tx.sender}`);
		}
	});

	it('getMessageToSign(), sign(), getSenderPublicKey() (implicit call) -> verify EIP155 signature before and after signing', () => {
		// Inputs and expected results for this test are taken directly from the example in https://eips.ethereum.org/EIPS/eip-155
		const txRaw = [
			'0x09',
			'0x4a817c800',
			'0x5208',
			'0x3535353535353535353535353535353535353535',
			'0x0de0b6b3a7640000',
			'0x',
		];

		// TODO(rgeraldes24) - add correct data to seed
		const seed = hexToBytes(
			'72e3cf696c4680c3ab310774df1e898d32a0abd1988007e6e334d2a8d517f8f3b3d411bd8584cfec683008f8e8d498f9255deab75e3bc901c3460dcf5bb7334ec54c2556e4d823cee9a264b49769ee419dd82c9a2ac8f663b65fa3c64630ac1790422aa3a26811372de2208e643645d0a48992b26154186d420851484028d8308ae1440a1b3982d3480ee4245082948cd438884bc6114c80414c186c9b960ccb282563a02c5b1204224041d112641a3705403020218840538230a44001888644e4423291b0698b404d0114604a26658102209822715140612102441ab1100b28901420111c870119b489dc867000c80503b10103a00051b82cd4962089462e14a790d1424a5b26325cc28d203410dba66019028e98200c11a26cc01425c84691d3a66809328ea1426509c8011c034c224611d234090c4325924628cc10281c320681326d88484a980432a4824d109931a28649d9c880501482a1042e0aa40910912c60344813072241c82d48429021412298a241e3246e14342d4a466c9492605bc8289cb28958b08c98a824d8a2211c898100144ca096900b042d5a2809d33482c0166121450d0a29281199681cb72c0c2066249960c39891daa04493c025ccc88580805014462e1bc98894a00d09398d1124911c946922348a202652d9321253408ac4360290a62424b304134981123851d0042d11070d91086d24a725c8023122494419a345230100cab470a146611438058a302042269219248e141841c9b4606424300c874413194202806064120d20958c02a42d1c362ed1182909372409028d1c808d09198090a24101321052b68012a341840692892249a02649e0b66d52185111332201b5054ba44898b865603481c1944104842c01a94883c08d51242e1303305384310b200d1837405b808c9b300648426e2322701a071100104241b88091443118114cc8b6880a23028498118b08919b4405d1b001112282d8c62d1934811a11690ac02cdb226cc14005c44409d8a844c2024c1c235092a26181b281d9262dc4904913240ec00826e0b84dd0c8681c098e21b445c300410245898cc4240cc26ce4a06113236454004984c4211bb769c4a82d99a8058338861c234de1429220b2240a3982d4040502c1451143500c202944060922b68562a445939070db407000258a0111500c4526101269c320050c3420e1000910408d98b28161440223412d49a0295906005230709c32086448001c1832089170dc182c49466ce4a0089b88849c486813256dd89805d446280814610ba9405c342c51a029521869d2420ccc326d0c118c84282a0a912009c7518a464dc84066d8184e533026a412014bb60990b22122b86061946c004431193731403061cbc08c022251d228604c1872cb92682128261284654100201b326a429004e400858018280cc568c00428200746240485149350db2821dc882851a45049464981343162108c91c849da021143c24c00b92912026dd0367259188263c07189087212208292328612a591cb208681c20821224e19b765a1c8052247660b128114410424060aa0806922b36c62884401996d8a400201002a192680cb4060e4368d0b382c5a122163402803b548d3442900422c53260e039290833882c046700115208cb44560a84c0231251ab6109b328581902503360859a42de0b870600822ca18826312061b3549da14816122061cb40c1c3624000904d1a831c3a28823412ce4244d00202e8404690007811a3544d2340a2027610b944911308118a2640b292d908225043021d2b00090b04452264208414d9130311c984104998818384923424a13816150924c6284281007858220011b302902a9451848499016711ab62452c60490c86d1117428a406d498460631652d22050c2448618c3051c0581200088984226189750641081a1c851902421118324d202698a1624140904584850a33620203092c944710c896951b624cb464ddc40226404660b2765830630c904618b260de1189262b625c3a06c122791e1a0652100656100250227529c121093006a00b1818b324e94b2855906319b32081022298996085124660208809c8648cc260421174ae3168d5c160d990644e116500c2352d1441201a68091124ccb904963c20420c66c42b27085ba1e4b1ab2a5cd1cfa5bfbbb410e18a5b442b6148bce4a5511b040884612bd402049b23539eb2ab508832aa4f7078dcadcf154feb86f2751fc2c3696a9dd16bbfc9630f1196abe4c3e2012946e0ba6fc9bd9207217c08beb29f6a40177b56147c74585a5009b656a05984b8aea6c4193a29abfcfdbb96ac145fa8cc7db515d116126297e07a54a76f4a5e010343c4db68d6056d973a5c6aa9d0d5c9dae7d11a6d4efff73205d9d69ced9eabed73b4e73e721f037e0cb1728ea1bfc04b8185eedc34c061edb9b6d451c7b287fd0194b0a22ac0b93509c40449c11681b1f6bd489022e1b30f60123b549d136f2a99055cbbbd62a81cbb37d0ba95db233d4a69ee85b266fcac7765708ac0fcb2b179510861eaf4bfd74f21d2364f6d66561653a4e9e129d9288fb6510bc0a4b4188e7896a1de586455fb623ebfcc9374bb05632f7d2ce352707faa10c4c7f55c9ee70d10eabca5e375e18763f7d6de37118a8f89cc496d5b9411d88678439fce0581435a1aefe255b0d23e41ce1ba7f425498f826d41d392e6408bc4fc620b2cd8b4c276e8acf5b89a97dcde53cd7de1a01052c7fe8c5cbc0fc34f461cb461ebb69dcc6cf9eeabb36c71ec3128e85b94b4e4e383fa925ae471b47a7e8ab1e540f4c88bb3af74b0bc58ea25979c0381f8bda0891080f6fd8c13483ba42a60c41b4df3e5fb9f7a3df10f2101e83deb169e8df76c64f331ff968179db738c0948124f1bbe8597d86b96f52531ded8bd128acb2e2b67879c943d14e16602b57fb303617a9faf435969102c31e4b167cc75a82252dfde73f01ef77eed74b27c8a45f09e61067e8fecc65cdfd1a0c9c24b230b26817c84ba22c4c8ed594a866d4c58fa997da726be714781eaf40aff3837f0884ce881445d639c768b76e156c3aec9d7d3652b62a9c8b68053d90845f3d3b7315800acc7f8d44798c63100c7b6f393a20be0fdfedf5c607b5a8559da66a05231613851d2b59e0dc971f9c8da2a41593c691e24bcd94ed583b3673d913b1ac10a7ee6e1c9f3e4d92fb8927186498320a6083504da3eb0e373f14b89bf237a297ed91de3f51a200e8f9a14a1ec13668106455c886fc14ce127e034dcd22ed32725585441c357ba9b20ae03b32b867a9ede0182bdb5589593d4343437cea8a8256dfcae588a27ea90e5db9afbee033b3141b395ec4b8438f5f6dea62770c49903e0d4f1bfeb7db4b9cfd7631a44ff5dd719b9727e24cd3e9c24ad9c0c237845b5e24aad076114d8b6ac7de5de4026f9c9e70f4410beef8c46645375c696f241860a68c9e7c7d19887700b0337624a0bb582b3ee961fdc7046a72cbf2635233efcfe4c247a24c5a5e9a82ec48e81636fac232663c5eef4373e3424b0e3454ec7407f22473dd95a5dce7196e268b49ce6f69fc0d8351de9701e156fdbd2027bbf9507fa53f73ee304a48aba5ad7716965ce49960ac14b574022354ff88b7ded0de2318fe84de4b319d737b42ef7da2cb07ff58aa2a013037f3955ffb1ff469e3ddb4d3a5dbaa1c491131eea711061d55f1a3017df1f8a6d0a30b31ae1ac7b8197d1af23e20eba5933c09db5ba8ff4cec2e4a2fdd9f3e04d4b9270d29b81cb66e5ea5e5354a42a06cea0346ca109d3f546fddf5028ee70ffae96c597b4a3151c5466b96b57c907e309589679eb89e3fe559e6c8c170c845f92362a6c7f0f5fb85cc270637780aabdc6cebd081ba3927319182008ff53550eecdb1d4f8a17950e8102de93c85457cde388b990ac9c8a32a8b606ad6824ea388ff7dec103b9f583223ea1764a86b3bae3ecf8e9e414d2963dc36c4fc0f2b13333199d8890e8d1f3b6c506b96fa41507ae3416df9ee00fe9b4a69f8fe4135d3484efae512b2475efe054371c335efa8a71baaf5d188749d418e9bb8034b4a779cac224d63fcdf4d986d29f5e2380e33f27566dce8d074481b2929f8d322a29dd2792d91f704404d5f2d1dab72b45c7f06b86adc9091bcee6f7cb9f782c1a41ebf77e3545ef7cb9ec95ce01f5a22c3d8824b224f9dcb405cf1a161d010b81a36213b9800310e535db71248ef3112d2d76f16f113a0d553c726d36021621ef9c5afd20682a8763e1e5df008e6a1fccc332f1636da6a8d6ed4f788915ecd5f5f0e8bed5fd1f14e3b3b2d8b79584a959de2fbc9f23f7059cc089e204f8b0a22cd2981a5a3d73c3f78cee1416d943dd94d82244afc4aa08dd66ddf82991901330694478fc44c85609dce70019e621a7dbcbec7ba0a401c9e955e7acca840c439de6f72a86abcf4b3342645fc02f8fc3a54fd6f3c6c2143ff115f66036c8a26034e80ac42efc345ca78fd0f63064e45773d74eb2e23453df00cd7fea0e67d8a2c073848a24e4cb978854fe51d267c4f8932a0cf5e60f72c792f9497fcc09462e9b58fbcfbb582c8258953a79d0547a955a8f69948dc0b0acfa9e86e300804cb5ee2fa32e9d8d641e146bd6edee55ca4aa2f3bbc4720026e025925d5ddccdd2b214f0a5e3dffd0d3ead28fc6e6834f0c3cbf14af3d14ca8368dc7d825f4958485d355ccc844327c98feef8b51d9963a91b2eeb1fd2b8215d85e34b3686044562ee97c1433dfefd3173a024aa65d502ac86b5c616ad9299ddd27ce8761ac3ff0df6a4f230d2a2dd090decc6d014bc8749981ceb85744c38a274990655e7315e540cabe67b745c46c58c9bfbf9b47297314bfd2459b9093c3674a04516bf9c27935cd14df7d1d67fd04bff1fac3a4477f1550eb3442879953c06c2f4aca9e0f8d1ee44a5f7ba3b7285e56df60e8b14b279ec9987e107368c58c685cbcb9d655707ae7cbf37df43552d5bd6887b5bb5b4373eb98202fb1c30c1b8351151695fc07873b63379e2b076aaa3af7037bbd2339530109ae586d1b5787678b94ca9aae889e6796b70cf69457852818d0b63ec1432dcc5c89b70202baf249fd444845c376cb9bbd86713416b7866d27cda4e3ee9165e94f32121ff1b977f05f4d5898a0c90f6aa7617b50979414a96b308d332c3fed832011bd57a72e4cfeba99113f96fa38aef69491657516dfa71f6ff36fab1d362fb2f41f0141e0fd574a94b5ec719a01621a6fc909444b572de60984a76d9198d8f76756d7021316c7ad2986f6797bf976c15c48ab0353986214c811a7b06abdee5135e95445d3119c5bb025ab95d7e4bcbb671e0cedbbb3f5adfcdb4457ae533927339b5a041098d6388d22b576dd9cc62d9e979981e65c71397e82c444308977d4c6decb8f64c70f8f14f06d03f5929c8ca713583819e9a38d1187f89fab24114b1d27e4898a288904d28653da78b7309202debbc4c49f3250b4307c659de75547c23fbe32bb4d6a9a82b2337cc6161607fc90d300f7a3e1712638a0a7857ebd23e9405db1079d9bcbaf5a6a11f94ae395a05837b8cf0696dcb1af91663428eeda8fa6789712cfeb60b3a8a28d8c7c060e6b8ef23d21e13e86d120410a3ce217c01ad0f95214a1c5a9955ad297093595aca4f47087d3e29da0ccd8644e93f833c7887a844816ec13fe7c1bec62009f1a1f27fc7504398f23c8dc5c2470c43dab514a7915f520bc25f166d3c5253da1c51bbaf6b4be46626206c9f23b6ed7105b02f511d8c2a6d7cedef8b882c1d2a5feecbdd4024b74e4d12c13117982321d7939ffa987ddab6a468942d97f8238e17a17d478792604ed59bd79d8b12c3c222ca2c61a33d03ded47504eeec8098c568853dbce3c6656af014a5cfbb62d6af2c1064fb4d32ae03156ac7f151c0985534bc3edd2815878316bf7843f7a9f4fbbb288f2bda56401bde98fdd6a6445320859080469add6ad8403b8d16d49c67cd93f97a79f1be521d0e705a128ef1e528ab2e874351c2b09e39d2df9677e8e98bdeb5310335ae6c69200418869f811ca85f7478ac07ce3085d4ac1471826e48442ecacd364caa26053d10d8e2c575b84a96ffefa992c2c2b997d1525c874434cbf8fc81eed05b5bef3967806bda1a975770dcfcd0047328d32999038f1fbc4529038d2497ccf3565d7eb1bb8f5fcec88c0020126ecc27b01ea2fe3c9e045db42df90f3c3f931179f1f6b13d7a733dc4f6b4acafeaded76e08af4f3e61d96c1a976304502c0df8cb0752d0a7e03ddbc2e3c171dd4aaeaec5cba0560698baf7a4068cc69d91f437c0712a4d039cdd88c3707d2d3ad6ff84d1cc54d2ba9ec765222aed4c81f70aa6ccf36cca0b20e30ec085dd980707c5133dbc209bdc16c88271fcffdd61ce2340348b9f08bb785094d8ed0bb7de38f6b2ff9ed6b5eba009e30c08377e098e6e94c26f89d531204a9c4e0d151888dae3d79ad0a5e1396edd923e2c91535a37401ad387b57464ec66f8ebeb23fd5419314b4ee5f8edeefbc9521fa2a10030ad5e2558443ba2f1469aeb276407cfc3472d00f9306a06abc10f1009d3af9ddc5c7d6de9c425afa3ec2e1a908ef42a50cc00a96ee62edf77cfdbe682292e099a865947220306182aa434230dd09fd3612db809d1376e208f47e5e754ad6ac6df1c96e40bb4f3dd7380c7ce3b3e138ac6f77fa60c9d81318f0ad90a023e798cafd0a6b90ff98dcfa36917c005bdcfba3798027379bf169e4bb6e7ac220bdb2505a0e85606e940fdec56807d5efdb794804fd554f55fdfbc7376a6f6f616086699d63649370e3c7f7da1f8c8dcab84adab7dda04cc0489d26828482ec5bc7e64',
		);
	
		const pt = Transaction.fromValuesArray(txRaw.map(toUint8Array));

		// Note that Vitalik's example has a very similar value denoted "signing data".
		// It's not the output of `serialize()`, but the pre-image of the hash returned by `tx.hash(false)`.
		// We don't have a getter for such a value in Transaction.
		expect(bytesToHex(pt.serialize())).toBe(
			'0xec098504a817c800825208943535353535353535353535353535353535353535880de0b6b3a764000080808080',
		);
		const signedTx = pt.sign(seed);
		expect(bytesToHex(signedTx.getMessageToSign())).toBe(
			'0xdaf5a779ae972f972197303d7b574746c7ef83eadac0f2791ad23db92e4c8e53',
		);
		expect(bytesToHex(signedTx.serialize())).toBe(
			'0xf86c098504a817c800825208943535353535353535353535353535353535353535880de0b6b3a76400008025a028ef61340bd939bc2195fe537567866003e1a15d3c71ff63e1590620aa636276a067cbe9d8997f761aecb703304b3800ccf555c9f3dc64214b297fb1966a3b6d83',
		);
	});

	it('sign(), getSenderPublicKey() (implicit call) -> EIP155 hashing when singing', () => {
		const common = new Common({ chain: 1, hardfork: Hardfork.Petersburg });
		for (const txData of txFixtures.slice(0, 3)) {
			const tx = Transaction.fromValuesArray(txData.raw.slice(0, 6).map(toUint8Array), {
				common,
			});

			const seed = hexToBytes(txData.seed);
			const txSigned = tx.sign(seed);

			expect(txSigned.getSenderAddress().toString()).toBe(`0x${txData.sendersAddress}`);
		}
	});

	it('sign(), serialize(): serialize correctly after being signed with EIP155 Signature for tx created on ropsten', () => {
		const txRaw = [
			'0x1',
			'0x02540be400',
			'0x5208',
			'0xd7250824390ec5c8b71d856b5de895e271170d9d',
			'0x0de0b6b3a7640000',
			'0x',
		];
		const seed = hexToBytes(
			'DE3128752F183E8930D7F00A2AAA302DCB5E700B2CBA2D8CA5795660F07DEFD5',
		);
		const common = new Common({ chain: 1 });
		const tx = Transaction.fromValuesArray(txRaw.map(toUint8Array), { common });
		const signedTx = tx.sign(seed);
		expect(bytesToHex(signedTx.serialize())).toBe(
			'0xf86c018502540be40082520894d7250824390ec5c8b71d856b5de895e271170d9d880de0b6b3a76400008026a05e5c85a426b11e1ba5d9b567e904818a33975962942f538d247cd7391f5fb27aa00c8ec23ca4a3cdc2515916e4adc89676ce124fd7d0ddbb3ddd37c441dd584c21',
		);
	});

	it('sign(), verifySignature(): should ignore any previous signature when decided if EIP155 should be used in a new one', () => {
		const txData: TxData = {
			data: '0x7cf5dab00000000000000000000000000000000000000000000000000000000000000005',
			gasLimit: '0x15f90',
			gasPrice: '0x1',
			nonce: '0x01',
			to: '0xd9024df085d09398ec76fbed18cac0e1149f50dc',
			value: '0x0',
		};

		const seed = hexToBytes(
			'',
		);

		const common = new Common({
			chain: Chain.Mainnet,
			hardfork: Hardfork.TangerineWhistle,
		});

		const fixtureTxSignedWithoutEIP155 = Transaction.fromTxData(txData, {
			common,
		}).sign(seed);
		// eslint-disable-next-line @typescript-eslint/consistent-type-assertions
		let signedWithEIP155 = Transaction.fromTxData(<any>txData).sign(seed);

		expect(signedWithEIP155.verifySignature()).toBe(true);
		// expect(signedWithEIP155.v?.toString(16)).not.toBe('1c');
		// expect(signedWithEIP155.v?.toString(16)).not.toBe('1b');
		// eslint-disable-next-line @typescript-eslint/consistent-type-assertions
		signedWithEIP155 = Transaction.fromTxData(<any>fixtureTxSignedWithoutEIP155.toJSON()).sign(
			seed
		);

		expect(signedWithEIP155.verifySignature()).toBe(true);
		//expect(signedWithEIP155.v?.toString(16)).not.toBe('1c');
		//expect(signedWithEIP155.v?.toString(16)).not.toBe('1b');
		// eslint-disable-next-line @typescript-eslint/consistent-type-assertions
		let signedWithoutEIP155 = Transaction.fromTxData(<any>txData, {
			common,
		}).sign(seed);

		expect(signedWithoutEIP155.verifySignature()).toBe(true);
		//expect(
		//	signedWithoutEIP155.v?.toString(16) === '1c' ||
		//		signedWithoutEIP155.v?.toString(16) === '1b',
		//).toBe(true);
		// eslint-disable-next-line @typescript-eslint/consistent-type-assertions
		signedWithoutEIP155 = Transaction.fromTxData(<any>txData, {
			common,
		}).sign(seed);

		expect(signedWithoutEIP155.verifySignature()).toBe(true);
		// expect(
		// 	signedWithoutEIP155.v?.toString(16) === '1c' ||
		// 		signedWithoutEIP155.v?.toString(16) === '1b',
		// ).toBe(true);
	});

	// it('constructor: throw on legacy transactions which have v !== 27 and v !== 28 and v < 37', () => {
	// 	function getTxData(v: number) {
	// 		return {
	// 			v,
	// 		};
	// 	}
	// 	for (let n = 0; n < 27; n += 1) {
	// 		expect(() => Transaction.fromTxData(getTxData(n))).toThrow();
	// 	}
	// 	expect(() => Transaction.fromTxData(getTxData(29))).toThrow();
	// 	expect(() => Transaction.fromTxData(getTxData(36))).toThrow();

	// 	expect(() => Transaction.fromTxData(getTxData(27))).not.toThrow();
	// 	expect(() => Transaction.fromTxData(getTxData(28))).not.toThrow();
	// 	expect(() => Transaction.fromTxData(getTxData(37))).not.toThrow();
	// });

	it('sign(), verifySignature(): sign tx with chainId specified in params', () => {
		const common = new Common({ chain: Chain.Goerli, hardfork: Hardfork.Petersburg });
		let tx = Transaction.fromTxData({}, { common });
		expect(tx.common.chainId()).toEqual(BigInt(5));

		const seed = hexToBytes(txFixtures[0].seed);
		tx = tx.sign(seed);

		const serialized = tx.serialize();

		const reTx = Transaction.fromSerializedTx(serialized, { common });
		expect(reTx.verifySignature()).toBe(true);
		expect(reTx.common.chainId()).toEqual(BigInt(5));
	});

	it('freeze property propagates from unsigned tx to signed tx', () => {
		const tx = Transaction.fromTxData({}, { freeze: false });
		expect(Object.isFrozen(tx)).toBe(false);
		const seed = hexToBytes(txFixtures[0].seed);
		const signedTxn = tx.sign(seed);
		expect(Object.isFrozen(signedTxn)).toBe(false);
	});

	it('common propagates from the common of tx, not the common in TxOptions', () => {
		const common = new Common({ chain: Chain.Goerli, hardfork: Hardfork.London });
		const seed = hexToBytes(txFixtures[0].seed);
		const txn = Transaction.fromTxData({}, { common, freeze: false });
		const newCommon = new Common({
			chain: Chain.Goerli,
			hardfork: Hardfork.London,
			eips: [2537],
		});
		expect(newCommon).not.toEqual(common);
		Object.defineProperty(txn, 'common', {
			get() {
				return newCommon;
			},
		});
		const signedTxn = txn.sign(seed);
		expect(signedTxn.common.eips()).toContain(2537);
	});

	it('isSigned() -> returns correct values', () => {
		let tx = Transaction.fromTxData({});
		expect(tx.isSigned()).toBe(false);

		const txData: TxData = {
			data: '0x7cf5dab00000000000000000000000000000000000000000000000000000000000000005',
			gasLimit: '0x15f90',
			gasPrice: '0x1',
			nonce: '0x01',
			to: '0xd9024df085d09398ec76fbed18cac0e1149f50dc',
			value: '0x0',
		};
		const seed = hexToBytes(
			'',
		);
		tx = Transaction.fromTxData(txData);
		expect(tx.isSigned()).toBe(false);
		tx = tx.sign(seed);
		expect(tx.isSigned()).toBe(true);

		tx = Transaction.fromTxData(txData);
		expect(tx.isSigned()).toBe(false);
		const rawUnsigned = tx.serialize();
		tx = tx.sign(seed);
		const rawSigned = tx.serialize();
		expect(tx.isSigned()).toBe(true);

		tx = Transaction.fromSerializedTx(rawUnsigned);
		expect(tx.isSigned()).toBe(false);
		tx = tx.sign(seed);
		expect(tx.isSigned()).toBe(true);
		tx = Transaction.fromSerializedTx(rawSigned);
		expect(tx.isSigned()).toBe(true);

		const signedValues = RLP.decode(Uint8Array.from(rawSigned));
		tx = Transaction.fromValuesArray(signedValues as Uint8Array[]);
		expect(tx.isSigned()).toBe(true);
		tx = Transaction.fromValuesArray(signedValues.slice(0, 6) as Uint8Array[]);
		expect(tx.isSigned()).toBe(false);
	});
});
